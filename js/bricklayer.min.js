!function o(i,r,s){function u(n,e){if(!r[n]){if(!i[n]){var t="function"==typeof require&&require;if(!e&&t)return t(n,!0);if(l)return l(n,!0);t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}t=r[n]={exports:{}};i[n][0].call(t.exports,function(e){var t=i[n][1][e];return u(t||e)},t,t.exports,o,i,r,s)}return r[n].exports}for(var l="function"==typeof require&&require,e=0;e<s.length;e++)u(s[e]);return u}({1:[function(e,t,n){var o,i,r,s,u,l,p,h,c=this&&this.__extends||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);function o(){this.constructor=e}e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)};function a(e){return[].slice.call(e)}function m(e,t,n){var o;return window.CustomEvent?o=new CustomEvent(t,{detail:n}):(o=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n),e.dispatchEvent(o)}function d(e){this.element=document.createElement("div"),this.element.className=e}function f(){r.apply(this,arguments)}function y(){u.apply(this,arguments)}function C(e,t){void 0===t&&(t=i),this.element=e,this.options=t,this.build(),this.buildResponsive()}p=o=o||{},i={rulerClassName:"bricklayer-column-sizer",columnClassName:"bricklayer-column"},d.prototype.destroy=function(){this.element.parentNode.removeChild(this.element)},c(f,r=h=d),f.prototype.getWidth=function(){this.element.setAttribute("style","\n        display: block;\n        visibility: hidden !important;\n        top: -1000px !important;\n      ");var e=this.element.offsetWidth;return this.element.removeAttribute("style"),e},s=f,c(y,u=h),l=y,C.prototype.append=function(e){var t,n=this;Array.isArray(e)?e.forEach(function(e){return n.append(e)}):(t=this.findMinHeightColumn(),this.elements=a(this.elements).concat([e]),this.applyPosition("append",t,e))},C.prototype.prepend=function(e){var t,n=this;Array.isArray(e)?e.forEach(function(e){return n.prepend(e)}):(t=this.findMinHeightColumn(),this.elements=[e].concat(a(this.elements)),this.applyPosition("prepend",t,e))},C.prototype.on=function(e,t){return this.element.addEventListener("bricklayer."+e,t),this},C.prototype.redraw=function(){var e=this.columnCount;this.checkColumnCount(!1),this.reorderElements(e),m(this.element,"bricklayer.redraw",{columnCount:e})},C.prototype.destroy=function(){var t=this;this.ruler.destroy(),a(this.elements).forEach(function(e){return t.element.appendChild(e)}),a(this.getColumns()).forEach(function(e){return e.parentNode.removeChild(e)}),m(this.element,"bricklayer.destroy",{})},C.prototype.build=function(){this.ruler=new s(this.options.rulerClassName),this.elements=this.getElementsInOrder(),this.element.insertBefore(this.ruler.element,this.element.firstChild)},C.prototype.buildResponsive=function(){var t=this;window.addEventListener("resize",function(e){return t.checkColumnCount()}),this.checkColumnCount(),this.on("breakpoint",function(e){return t.reorderElements(e.detail.columnCount)}),1<=this.columnCount&&this.reorderElements(this.columnCount)},C.prototype.getColumns=function(){return this.element.querySelectorAll(":scope > ."+this.options.columnClassName)},C.prototype.findMinHeightColumn=function(){var e=a(this.getColumns()),t=e.map(function(e){return e.offsetHeight}),n=Math.min.apply(null,t);return e[t.indexOf(n)]},C.prototype.getElementsInOrder=function(){return this.element.querySelectorAll(":scope > *:not(."+this.options.columnClassName+"):not(."+this.options.rulerClassName+")")},C.prototype.checkColumnCount=function(e){void 0===e&&(e=!0);var t=this.getColumnCount();this.columnCount!==t&&(e&&m(this.element,"bricklayer.breakpoint",{columnCount:t}),this.columnCount=t)},C.prototype.reorderElements=function(e){var t=this;void 0===e&&(e=1);for(var n=a(this.elements).map(function(e){return e.parentNode?e.parentNode.removeChild(e):e}),o=this.getColumns(),i=0;i<o.length;i++)o[i].parentNode.removeChild(o[i]);for(i=0;i<e;i++){var r=new l(this.options.columnClassName).element;this.element.appendChild(r)}n.forEach(function(e){t.findMinHeightColumn().appendChild(e)})},C.prototype.getColumnCount=function(){var e=this.element.offsetWidth,t=this.ruler.getWidth();return 0==t?1:Math.round(e/t)},C.prototype.applyPosition=function(t,n,o){function e(e){e=e+t.charAt(0).toUpperCase()+t.substr(1),m(i.element,"bricklayer."+e,{item:o,column:n})}var i=this;switch(e("before"),t){case"append":n.appendChild(o);break;case"prepend":n.insertBefore(o,n.firstChild)}e("after")},h=C,p.Container=h,p="undefined"!=typeof window?window:this,h=function(){return o.Container},"function"==typeof define&&define.amd?define(h):"undefined"!=typeof window&&p===window?p.Bricklayer=h():"object"==typeof t&&t.exports&&(t.exports=h())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
