function scrolled(){$(document).scrollTop()>$("#header").outerHeight()?$("body").addClass("scrolled"):$("body").removeClass("scrolled")}function setMain(){$("#main-content").css({"min-height":$(window).innerHeight()-$("#footer").outerHeight(),"padding-top":$("#header").outerHeight()})}function setHomeHeight(){$(".home").css({"min-height":$(window).innerHeight()-$("#header").outerHeight()})}function backToTop(){var e=$(".back-to-top");$(window).on("scroll",function(){200<=$(window).scrollTop()?e.fadeIn(400):e.fadeOut(400)})}function jsScroll(){var o=$("#header").outerHeight()-22;$(".js-scroll").on("click",function(){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var e=$(this.hash);if((e=e.length?e:$("[name="+this.hash.slice(1)+"]")).length){e=e.offset().top-o;return $("html, body").animate({scrollTop:e},1e3,"swing"),!1}}})}function bricklayer(){$(".bricklayer").length&&new Bricklayer(document.querySelector(".bricklayer"))}function resizeMasonryItem(e){var o=$(".masonry-container"),t=o.css("grid-row-gap"),o=o.css("grid-auto-rows"),t=Math.ceil((e.querySelector(".blog__item").getBoundingClientRect().height+t)/(o+t));console.log("blog__item "+$(".blog__item").height()),console.log("rowSpan "+t),e.style.gridRowEnd="span "+t}function resizeAllMasonryItems(){for(var e=$(".masonry-item"),o=0;o<e.length;o++)resizeMasonryItem(e[o])}jQuery(document).ready(function(e){scrolled(),setMain(),setHomeHeight(),backToTop(),jsScroll(),bricklayer(),resizeAllMasonryItems(),e(document).scroll(function(){scrolled()}),e(window).resize(function(e){setMain(),setHomeHeight()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9TY3JpcHQgc3DDqWNpZmlxdWVzIGF1IHRow6htZSBcIkFsZXhHcmFwaGljRGVzaWduZXJcIlxyXG5cclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigkKXtcclxuXHJcbiAgc2Nyb2xsZWQoKTtcclxuICBzZXRNYWluKCk7XHJcbiAgc2V0SG9tZUhlaWdodCgpO1xyXG4gIGJhY2tUb1RvcCgpO1xyXG4gIGpzU2Nyb2xsKCk7XHJcbiAgYnJpY2tsYXllcigpO1xyXG4gIHJlc2l6ZUFsbE1hc29ucnlJdGVtcygpO1xyXG5cclxuICAvL09uIGV4ZWN1dGUgbGEgZm9uY3Rpb24gcXVpIGRvaXQgcydleGVjdXRlciBhdSBzY3JvbGxcclxuICAkKGRvY3VtZW50KS5zY3JvbGwoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNjcm9sbGVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vT24gYXBwZWxsZSBsYS9sZXMgZm9uY3Rpb24ocykgcXVpIGRvaXQgcyfDqXjDqWN1dGVyIGF1IHJlc2l6ZVxyXG4gICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oZSkge1xyXG4gICAgICBzZXRNYWluKCk7XHJcbiAgICAgIHNldEhvbWVIZWlnaHQoKTtcclxuICB9KTtcclxuXHJcbn0pO1xyXG5cclxuLy9Gb25jdGlvbiBxdWkgZMOpdGVybWluZSBzaSBvbiBhcyBzY3JvbGzDqSBvdSBub24sIG9uIGVmZmVjdHVlIGRlcyBhY3Rpb25zIHNlbG9uIGxlIGNhc1xyXG5mdW5jdGlvbiBzY3JvbGxlZCgpe1xyXG4gIC8vT24gcsOpY3Vww6hyZSBsYSB2YWxldXIgZHUgc2Nyb2xsXHJcbiAgdmFyIHNjcm9sbFZhbCA9ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpO1xyXG4gIGlmIChzY3JvbGxWYWwgPiAkKCcjaGVhZGVyJykub3V0ZXJIZWlnaHQoKSl7XHJcbiAgICAkKCdib2R5JykuYWRkQ2xhc3MoXCJzY3JvbGxlZFwiKTtcclxuICB9ZWxzZXtcclxuICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcyhcInNjcm9sbGVkXCIpO1xyXG4gIH1cclxufVxyXG5cclxuLy9Gb25jdGlvbiBxdWkgcGVybWV0cyBkZSBmaXhlciBsZSBmb290ZXIgZW4gYmFzIGRlIGxhIHBhZ2VcclxuZnVuY3Rpb24gc2V0TWFpbigpe1xyXG4gICQoXCIjbWFpbi1jb250ZW50XCIpLmNzcyh7XHJcbiAgICAnbWluLWhlaWdodCcgOiAkKHdpbmRvdykuaW5uZXJIZWlnaHQoKSAtICQoJyNmb290ZXInKS5vdXRlckhlaWdodCgpLFxyXG4gICAgJ3BhZGRpbmctdG9wJyA6ICQoJyNoZWFkZXInKS5vdXRlckhlaWdodCgpXHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vT24gbWV0IGxhIHNlY3Rpb24gZGUgbGEgaG9tZSDDoCAxMDAlIGR1IHZpZXdwb3J0XHJcbmZ1bmN0aW9uIHNldEhvbWVIZWlnaHQoKXtcclxuICAkKCcuaG9tZScpLmNzcyh7XHJcbiAgICAnbWluLWhlaWdodCcgOiAkKHdpbmRvdykuaW5uZXJIZWlnaHQoKSAtICQoJyNoZWFkZXInKS5vdXRlckhlaWdodCgpXHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vIEJvdXRvbiByZXRvdXIgaGF1dCBkZSBwYWdlXHJcbmZ1bmN0aW9uIGJhY2tUb1RvcCgpe1xyXG4gIHZhciBweFNob3cgPSAyMDAsXHJcbiAgICAgIGZhZGVJblRpbWUgPSA0MDAsXHJcbiAgICAgIGZhZGVPdXRUaW1lID0gNDAwLFxyXG4gICAgICBnb1RvcEJ1dHRvbiA9ICQoXCIuYmFjay10by10b3BcIilcclxuXHJcbiAgJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPj0gcHhTaG93KSB7XHJcbiAgICAgICAgICBnb1RvcEJ1dHRvbi5mYWRlSW4oZmFkZUluVGltZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBnb1RvcEJ1dHRvbi5mYWRlT3V0KGZhZGVPdXRUaW1lKTtcclxuICAgICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG4vL1Ntb290aHNjcm9sbFxyXG5mdW5jdGlvbiBqc1Njcm9sbCgpe1xyXG4gIHZhciBtYWluTmF2X2hlaWdodCA9ICQoJyNoZWFkZXInKS5vdXRlckhlaWdodCgpIC0gMjI7XHJcbiAgJCgnLmpzLXNjcm9sbCcpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sICcnKSA9PSB0aGlzLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCAnJykgJiYgbG9jYXRpb24uaG9zdG5hbWUgPT0gdGhpcy5ob3N0bmFtZSkge1xyXG4gICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzLmhhc2gpO1xyXG4gICAgICB0YXJnZXQgPSB0YXJnZXQubGVuZ3RoID8gdGFyZ2V0IDogJCgnW25hbWU9JyArIHRoaXMuaGFzaC5zbGljZSgxKSArICddJyk7XHJcbiAgICAgIGlmICh0YXJnZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHNjcm9sbHRvID0gdGFyZ2V0Lm9mZnNldCgpLnRvcCAtIG1haW5OYXZfaGVpZ2h0O1xyXG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsdG9cclxuICAgICAgICB9LCAxMDAwLCBcInN3aW5nXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBicmlja2xheWVyKCl7XHJcbiAgaWYgKCQoXCIuYnJpY2tsYXllclwiKS5sZW5ndGgpIHtcclxuICAgIHZhciBicmlja2xheWVyID0gbmV3IEJyaWNrbGF5ZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJyaWNrbGF5ZXInKSlcclxuICB9XHJcbn1cclxuXHJcbi8vTWFzb25yeVxyXG5cclxuZnVuY3Rpb24gcmVzaXplTWFzb25yeUl0ZW0oaXRlbSl7XHJcbiAgLyogR2V0IHRoZSBncmlkIG9iamVjdCwgaXRzIHJvdy1nYXAsIGFuZCB0aGUgc2l6ZSBvZiBpdHMgaW1wbGljaXQgcm93cyAqL1xyXG4gIHZhciBncmlkID0gJCgnLm1hc29ucnktY29udGFpbmVyJyksXHJcbiAgICAgIHJvd0dhcCA9IGdyaWQuY3NzKCdncmlkLXJvdy1nYXAnKSxcclxuICAgICAgcm93SGVpZ2h0ID0gZ3JpZC5jc3MoJ2dyaWQtYXV0by1yb3dzJyk7XHJcblxyXG4gIC8qXHJcbiAgICogU3Bhbm5pbmcgZm9yIGFueSBicmljayA9IFNcclxuICAgKiBHcmlkJ3Mgcm93LWdhcCA9IEdcclxuICAgKiBTaXplIG9mIGdyaWQncyBpbXBsaWNpdGx5IGNyZWF0ZSByb3ctdHJhY2sgPSBSXHJcbiAgICogSGVpZ2h0IG9mIGl0ZW0gY29udGVudCA9IEhcclxuICAgKiBOZXQgaGVpZ2h0IG9mIHRoZSBpdGVtID0gSDEgPSBIICsgR1xyXG4gICAqIE5ldCBoZWlnaHQgb2YgdGhlIGltcGxpY2l0IHJvdy10cmFjayA9IFQgPSBHICsgUlxyXG4gICAqIFMgPSBIMSAvIFRcclxuICAgKi9cclxuICB2YXIgcm93U3BhbiA9IE1hdGguY2VpbCgoaXRlbS5xdWVyeVNlbGVjdG9yKCcuYmxvZ19faXRlbScpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCtyb3dHYXApLyhyb3dIZWlnaHQrcm93R2FwKSk7XHJcbiAgY29uc29sZS5sb2coJ2Jsb2dfX2l0ZW0gJyArICQoJy5ibG9nX19pdGVtJykuaGVpZ2h0KCkpO1xyXG4gIGNvbnNvbGUubG9nKCdyb3dTcGFuICcgKyByb3dTcGFuKTtcclxuICAvKiBTZXQgdGhlIHNwYW5uaW5nIGFzIGNhbGN1bGF0ZWQgYWJvdmUgKFMpICovXHJcbiAgaXRlbS5zdHlsZS5ncmlkUm93RW5kID0gJ3NwYW4gJysgcm93U3BhbjtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHJlc2l6ZUFsbE1hc29ucnlJdGVtcygpe1xyXG4gIHZhciBhbGxJdGVtcyA9ICQoJy5tYXNvbnJ5LWl0ZW0nKTtcclxuICBmb3IodmFyIGk9MDtpPGFsbEl0ZW1zLmxlbmd0aDtpKyspe1xyXG4gICAgcmVzaXplTWFzb25yeUl0ZW0oYWxsSXRlbXNbaV0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsic2Nyb2xsZWQiLCIkIiwiZG9jdW1lbnQiLCJzY3JvbGxUb3AiLCJvdXRlckhlaWdodCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzZXRNYWluIiwiY3NzIiwibWluLWhlaWdodCIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwicGFkZGluZy10b3AiLCJzZXRIb21lSGVpZ2h0IiwiYmFja1RvVG9wIiwiZ29Ub3BCdXR0b24iLCJvbiIsImZhZGVJbiIsImZhZGVPdXQiLCJqc1Njcm9sbCIsIm1haW5OYXZfaGVpZ2h0IiwibG9jYXRpb24iLCJwYXRobmFtZSIsInJlcGxhY2UiLCJ0aGlzIiwiaG9zdG5hbWUiLCJ0YXJnZXQiLCJoYXNoIiwibGVuZ3RoIiwic2xpY2UiLCJzY3JvbGx0byIsIm9mZnNldCIsInRvcCIsImFuaW1hdGUiLCJicmlja2xheWVyIiwiQnJpY2tsYXllciIsInF1ZXJ5U2VsZWN0b3IiLCJyZXNpemVNYXNvbnJ5SXRlbSIsIml0ZW0iLCJncmlkIiwicm93R2FwIiwicm93SGVpZ2h0Iiwicm93U3BhbiIsIk1hdGgiLCJjZWlsIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaGVpZ2h0IiwiY29uc29sZSIsImxvZyIsInN0eWxlIiwiZ3JpZFJvd0VuZCIsInJlc2l6ZUFsbE1hc29ucnlJdGVtcyIsImFsbEl0ZW1zIiwiaSIsImpRdWVyeSIsInJlYWR5Iiwic2Nyb2xsIiwicmVzaXplIiwiZSJdLCJtYXBwaW5ncyI6IkFBMEJBLFNBQVNBLFdBRVNDLEVBQUVDLFVBQVVDLFlBQ1pGLEVBQUUsV0FBV0csY0FDM0JILEVBQUUsUUFBUUksU0FBUyxZQUVuQkosRUFBRSxRQUFRSyxZQUFZLFlBSzFCLFNBQVNDLFVBQ1BOLEVBQUUsaUJBQWlCTyxJQUFJLENBQ3JCQyxhQUFlUixFQUFFUyxRQUFRQyxjQUFnQlYsRUFBRSxXQUFXRyxjQUN0RFEsY0FBZ0JYLEVBQUUsV0FBV0csZ0JBS2pDLFNBQVNTLGdCQUNQWixFQUFFLFNBQVNPLElBQUksQ0FDYkMsYUFBZVIsRUFBRVMsUUFBUUMsY0FBZ0JWLEVBQUUsV0FBV0csZ0JBSzFELFNBQVNVLFlBQ1AsSUFHSUMsRUFBY2QsRUFBRSxnQkFFcEJBLEVBQUVTLFFBQVFNLEdBQUcsU0FBVSxXQUxWLEtBTUxmLEVBQUVTLFFBQVFQLFlBQ1ZZLEVBQVlFLE9BTkgsS0FRVEYsRUFBWUcsUUFQRixPQWFwQixTQUFTQyxXQUNQLElBQUlDLEVBQWlCbkIsRUFBRSxXQUFXRyxjQUFnQixHQUNsREgsRUFBRSxjQUFjZSxHQUFHLFFBQVMsV0FDMUIsR0FBSUssU0FBU0MsU0FBU0MsUUFBUSxNQUFPLEtBQU9DLEtBQUtGLFNBQVNDLFFBQVEsTUFBTyxLQUFPRixTQUFTSSxVQUFZRCxLQUFLQyxTQUFVLENBQ2xILElBQUlDLEVBQVN6QixFQUFFdUIsS0FBS0csTUFFcEIsSUFEQUQsRUFBU0EsRUFBT0UsT0FBU0YsRUFBU3pCLEVBQUUsU0FBV3VCLEtBQUtHLEtBQUtFLE1BQU0sR0FBSyxNQUN6REQsT0FBUSxDQUNiRSxFQUFXSixFQUFPSyxTQUFTQyxJQUFNWixFQUlyQyxPQUhBbkIsRUFBRSxjQUFjZ0MsUUFBUSxDQUN0QjlCLFVBQVcyQixHQUNWLElBQU0sVUFDRixNQU1mLFNBQVNJLGFBQ0hqQyxFQUFFLGVBQWUyQixRQUNGLElBQUlPLFdBQVdqQyxTQUFTa0MsY0FBYyxnQkFNM0QsU0FBU0Msa0JBQWtCQyxHQUV6QixJQUFJQyxFQUFPdEMsRUFBRSxzQkFDVHVDLEVBQVNELEVBQUsvQixJQUFJLGdCQUNsQmlDLEVBQVlGLEVBQUsvQixJQUFJLGtCQVdyQmtDLEVBQVVDLEtBQUtDLE1BQU1OLEVBQUtGLGNBQWMsZUFBZVMsd0JBQXdCQyxPQUFPTixJQUFTQyxFQUFVRCxJQUM3R08sUUFBUUMsSUFBSSxjQUFnQi9DLEVBQUUsZUFBZTZDLFVBQzdDQyxRQUFRQyxJQUFJLFdBQWFOLEdBRXpCSixFQUFLVyxNQUFNQyxXQUFhLFFBQVNSLEVBSW5DLFNBQVNTLHdCQUVQLElBREEsSUFBSUMsRUFBV25ELEVBQUUsaUJBQ1RvRCxFQUFFLEVBQUVBLEVBQUVELEVBQVN4QixPQUFPeUIsSUFDNUJoQixrQkFBa0JlLEVBQVNDLElBckgvQkMsT0FBT3BELFVBQVVxRCxNQUFNLFNBQVN0RCxHQUU5QkQsV0FDQU8sVUFDQU0sZ0JBQ0FDLFlBQ0FLLFdBQ0FlLGFBQ0FpQix3QkFHQWxELEVBQUVDLFVBQVVzRCxPQUFPLFdBQ2Z4RCxhQUlKQyxFQUFFUyxRQUFRK0MsT0FBTyxTQUFTQyxHQUN0Qm5ELFVBQ0FNIn0=
